export { writeFile as writeTextFile } from 'node:fs/promises';

interface IOptions {
    /**
     * @default "autoGetRemote" // The remote standard library b will be automatically obtained
     */
    stdVersion: string;
    /**
     * @default "src/index.ts"
     */
    index: string;
    /**
     * @default "deps"
     */
    depsDir: string;
    /**
     * @default false
     */
    npmSpecifiers: boolean;
    /**
     * @default "src"
     */
    src: string;
    /**
     * @default "https://esm.sh/"
     */
    npmCDN: string;
    vscode: Vscode;
    /**
     * @default defaultNormalize
     */
    normalize: (payload: NormalizePayload) => Promise<string>;
}
type Vscode = Partial<{
    disable: boolean;
    path: string;
    settings: Partial<{
        'deno.enable': boolean;
        'deno.enablePaths': string[];
    }>;
}>;
type Info = {
    code: string;
    specifier: string;
    expression?: string;
    isNodeBuiltin?: boolean;
    mode: 'export' | 'import' | 'dynamic';
};
type Infos = Info[];
interface File {
    content: string;
    filepath: string;
}
type NpmOptions = Pick<IOptions, 'npmCDN' | 'npmSpecifiers'>;
type Std = Partial<Pick<IOptions, 'stdVersion'>>;
type NormalizePayload = Info & NpmOptions & File & Std;
type ReducePayload = NpmOptions & Std & File & {
    infos: Infos;
} & Pick<IOptions, 'normalize'>;
interface ITransformReadMePayload {
    path: string;
    version?: string;
}

declare function readTextFile(filepath: string): Promise<string>;
declare function clean(path: string): Promise<void>;
declare function createTransformTextFile(handle: (filepath: string, content: string) => Promise<string>): (filepath: string) => Promise<string>;
declare function ensureFile(filepath: string): Promise<void>;

declare const getRemoteStdVersion: () => Promise<unknown>;

declare function findExports(code: string): Info[];
declare function findStaticImports(code: string): Info[];
declare function findDynamicImports(code: string): Info[];
declare function find(code: string): Info[];

declare function defaultNormalize(payload: NormalizePayload): Promise<string>;
declare function normalizeUrl(cdn: string): string;
declare function createReplace(content: string, code: string, specifier: string): (replaceValue: string) => string;

declare function udeno(options?: Partial<IOptions>): Promise<void>;
declare function reduce(payload: ReducePayload): Promise<string>;
declare function generateVscodeSetting(vscode: Vscode): Promise<void>;
declare function transformReadMe(payload: ITransformReadMePayload): Promise<void>;

export { IOptions, ITransformReadMePayload, Info, Infos, NormalizePayload, ReducePayload, Vscode, clean, createReplace, createTransformTextFile, defaultNormalize, ensureFile, find, findDynamicImports, findExports, findStaticImports, generateVscodeSetting, getRemoteStdVersion, normalizeUrl, readTextFile, reduce, transformReadMe, udeno };
